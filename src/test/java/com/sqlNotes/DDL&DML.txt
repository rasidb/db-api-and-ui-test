_____________________________________________________________________________________________________
|    DDL: data definition language                 |           DML: data manipulation language       |
|    it is used to define data structures          |         it is used to manipulate data itself    |
|    *CREATE                                       |          *SELECT                                |
|    *DROP                                         |          *INSERT                                |
|    *TRUNCATE                                     |          *UPDATE                                |
|    *ALTER                                        |          *DELETE                                |
______________________________________________________________________________________________________


To create a new table SQL, you use the CREATE TABLE statement
First, you specify the name of the new table after the CREATE TABLE clause

		CREATE TABLE  tableName
		(column name DATATYPE constrain);

		CONSTRAIN IS NOT MANDATORY TO GIVE 

There are many datatypes for example:
		*INT or INTEGER --> it is saying my value is integer   --> age INT

		*VARCHAR(n) or VARCHAR(n) --> it is saying my value length is max n --> surname VARCHAR(25)

	    *DECIMAL(p,s) or NUMERIC(p,s) 	--> kesirli sayılar icin kullanılır p=toplam rakam sayısı, s=ondalık rakamların sayısı --> salary DECIMAL(10,2)

	    *DATE or DATETIME --> used for date and hour informations --> hire_date DATE

	    *BOOLEAN or BIT --> used for boolean values (true or false) --> is_active BOOLEAN


CONSTRAINTS
		*PRIMARY KEY --> her satırdaki değer eşsizdir ve null olamaz --> employee_id INT PRIMARY KEY
		*UNIQUE      --> her satır için değer eşsizdir --> email VARCHAR(20) UNIQUE
		*NOTNULL     --> hücre null olamaz		--> salary INT NOTNULL
		*CHECK       --> belirli bi koşulu sağlamayan değerleri engeller --> age INT CHECK (age>17)


create a table

    Create table PotatoTeam(
        Emp_ID Integer Primary key,
        FirstName varchar(30)  not null,
        LastName varchar (30),
        JobTitle varchar (20)
    );

    add a value to the new table (tabloya yeni value ekle)

    insert into (emp_id, firstname, lastname, jobtitle)
    values(1,'rasid','babamgul','tester')

    how to update data --> güncelle

    update table_name
    set column1 =value1
    column2 =value 2
    where condition



    ALTER actions
    The popular actions that we can do with alter keyword
        ADD COLUMN --> adds column on the table
        DROP COLUMN --> drops the column to the table
        RENAME COLUMN --> renames the column name
        RENAME TO -->renames the table name


            how to add column?
                    alter table sqlNotes3 add column salary int not null;

            how to drop column?
                    alter table sqlNotes3 drop column salary;

            how to rename column?
                    alter table sqlNotes3 rename column salary to maas;  // rename keword is change the column name
                    alter table sqlNotes3 change column salary maas int // when use change keyword we change to our column's dataType

            how to rename the table?
                    alter table sqlNotes3 rename to sqlNotes4


            data yapısını değiştirmeden tüm data verisini silmeye yarar
                    truncate table sqlNotes3


            tüm table' ı silmek için
                    drop table sqlNotes3





            tabloda veri sil

          DELETE FROM address1
          WHERE address_id = 5;  -->address_id'nin 5 olduğu veriye dair her seyi sil

           veri güncelleme

           UPDATE address1
           SET phoneNumber = NULL
           WHERE address_id = 5; --> address_id'si 5 olan verinşn phonenumber'ını null yap



        LEFT JOIN

            'LEFT JOIN', iki tabloyu belirli bir koşul içinde birleştiren bir SQL methodudur.
            İlk belirtilen tablo (sol tablo) baz alınır ve LEFT JOIN ile birleşen tablo,
            belirtilen koşulu karşılamazsa sol tablodaki verileri gösterirken, sağdaki tabloda null değeri döner.
            Örneğin:
                SELECT users1.*, address1.*
                FROM users1 LEFT JOIN address1 ON users1.address_id = address1.address_id;
                sorgusu, tüm users1 verilerini gösterirken, address_id'leri eşleşmeyen veriler için users1 tablosu gösterilirken,
                 address1 tablosunda ilgili sütunlar null değeri alır.

        RIGHT JOIN

            'LEFT JOIN''in tam tersi
            SELECT users1.*, address1.*
                            FROM users1 RIGHT JOIN address1 ON users1.address_id = address1.address_id;

        INNER JOIN
            iki tabloyu birleştirmek için kullanılır sadece belirtilen koşulu sağlayan veriler gösterilir.
            yani uyuşmayan veriler iki tarafta da gösterilmez



        UNION
            2 farklı tabloda aynı isimde row varsa bunları sırayla listeler duplicate'ler otomatik kaldırılır
            select address_id from users1
            union
            select address_id from address1

        UNION
            2 farklı tabloda aynı isimde row varsa bunları sırayla listeler duplicate'ler kaldırılmaz
            select address_id from users1
            union all
            select address_id from address1

        MINUS
             MINUS sorgusu, iki sorgu arasındaki farkı bulur.
             İlk sorgunun sonuç kümesinden, ikinci sorgunun sonuç kümesini çıkarır.
             Bu sorgu, soldaki sorgunun sonuç kümesinde bulunan ancak sağdaki sorgunun sonuç kümesinde bulunmayan kayıtları döndürür.

             select address_id from users1
             minus
             select address_id from address1

            size icin

                select count (address_id) from (
                select address_id from users1
                minus
                select address_id from address1
                )


        INTERSECT
            INTERSECT sorgusu, iki sorgunun kesişimini bulur.
            İki sorgunun ortak olan sonuç kümesini döndürür.
            Yani, soldaki sorgunun sonuç kümesinde bulunan ve aynı zamanda sağdaki sorgunun sonuç kümesinde de bulunan kayıtları döndürür.


            select address_id from users1
            intersect
            select address_id from address1

                size icin

            select count (address_id) from (
            select address_id from users1
            intersect
            select address_id from address1)


